name: CI/CD

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  # Build and test job that runs on all PRs and pushes
  test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Swift
        uses: swift-actions/setup-swift@v1
        with:
          swift-version: "5.9"

      - name: Build
        run: swift build

      # Add test step when you have tests
      # - name: Test
      #   run: swift test

  # Changesets job that creates release PRs or publishes
  changeset:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    outputs:
      published: ${{ steps.changesets.outputs.published }}
      publishedPackages: ${{ steps.changesets.outputs.publishedPackages }}
    steps:
      - uses: actions/checkout@v4
        with:
          # Need full history for changesets
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm install

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          # This creates a PR with version bumps when changesets exist
          # When that PR is merged, it will publish (but we handle releases separately)
          publish: echo "Release handled in separate job"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build and release job that runs when a tag is pushed or changesets publishes
  release:
    runs-on: macos-latest
    needs: [changeset]
    if: |
      always() && 
      (startsWith(github.ref, 'refs/tags/v') || 
       (needs.changeset.result == 'success' && needs.changeset.outputs.published == 'true'))
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      checksum: ${{ steps.checksum.outputs.CHECKSUM }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Swift
        uses: swift-actions/setup-swift@v1
        with:
          swift-version: "5.9"

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # Triggered by tag push
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            # Triggered after changeset publish - extract from package.json
            VERSION=$(node -p "require('./package.json').version")
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Update Swift version
        run: |
          cat > update-swift-version.js << 'EOF'
          const fs = require('fs');
          const version = process.argv[2];
          const swiftFile = 'Sources/CalvergeCLI.swift';

          let content = fs.readFileSync(swiftFile, 'utf8');
          content = content.replace(/version: "[^"]*"/, `version: "${version}"`);
          fs.writeFileSync(swiftFile, content);
          console.log(`Updated Swift version to ${version}`);
          EOF

          node update-swift-version.js "${{ steps.version.outputs.VERSION }}"

      - name: Build and sign executable
        run: |
          swift build -c release
          codesign --force --sign - --entitlements calverge.entitlements .build/release/calverge

      - name: Create archive
        run: |
          mkdir -p release
          cp .build/release/calverge release/
          tar -czf calverge-${{ steps.version.outputs.VERSION }}-macos.tar.gz -C release .

      - name: Calculate checksum
        id: checksum
        run: |
          CHECKSUM=$(shasum -a 256 calverge-${{ steps.version.outputs.VERSION }}-macos.tar.gz | cut -d ' ' -f 1)
          echo "CHECKSUM=$CHECKSUM" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          files: |
            calverge-${{ steps.version.outputs.VERSION }}-macos.tar.gz
          body: |
            ## Changes

            See the [changelog](CHANGELOG.md) for details.

            ## Installation

            ### Homebrew (Recommended)
            ```bash
            brew install lgastler/tap/calverge
            ```

            ### Manual Installation
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.VERSION }}/calverge-${{ steps.version.outputs.VERSION }}-macos.tar.gz | tar xz
            sudo mv calverge /usr/local/bin/
            ```

            **SHA256 Checksum:** `${{ steps.checksum.outputs.CHECKSUM }}`
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Update Homebrew formula when a new release is created
  update-homebrew:
    runs-on: ubuntu-latest
    needs: [release]
    if: success()
    steps:
      - name: Update Homebrew formula
        uses: mislav/bump-homebrew-formula-action@v3
        with:
          formula-name: calverge
          formula-path: Formula/calverge.rb
          homebrew-tap: lgastler/homebrew-tap
          download-url: https://github.com/${{ github.repository }}/releases/download/v${{ needs.release.outputs.version }}/calverge-${{ needs.release.outputs.version }}-macos.tar.gz
          commit-message: |
            {{formulaName}} {{version}}

            Created by https://github.com/mislav/bump-homebrew-formula-action
        env:
          COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
